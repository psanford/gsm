package wap

import (
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"
	"github.com/psanford/gsm/mms"
)

func TestWapUnmarshalPushNotification(t *testing.T) {
	packet := []byte{
		0xf1, 0x06, 0x05, 0xbe, 0x8d, 0x80, 0xaf, 0x84, 0x8c, 0x82, 0x98, 0x78,
		0x2d, 0x78, 0x2d, 0x78, 0x78, 0x2d, 0x78, 0x2d, 0x78, 0x78, 0x78, 0x78,
		0x78, 0x78, 0x2d, 0x78, 0x78, 0x2d, 0x78, 0x78, 0x78, 0x2d, 0x78, 0x00,
		0x8d, 0x92, 0x89, 0x1a, 0x80, 0x18, 0x83, 0x2b, 0x31, 0x35, 0x35, 0x35,
		0x31, 0x32, 0x33, 0x31, 0x32, 0x33, 0x34, 0x2f, 0x54, 0x59, 0x50, 0x45,
		0x3d, 0x50, 0x4c, 0x4d, 0x4e, 0x00, 0x8a, 0x80, 0x8e, 0x03, 0x01, 0x88,
		0x63, 0x88, 0x05, 0x81, 0x03, 0x03, 0xf4, 0x80, 0x83, 0x68, 0x74, 0x74,
		0x70, 0x3a, 0x2f, 0x2f, 0x6d, 0x74, 0x2e, 0x74, 0x2d, 0x6d, 0x6f, 0x62,
		0x69, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x6d, 0x3f, 0x54,
		0x3d, 0x78, 0x2d, 0x78, 0x2d, 0x78, 0x78, 0x78, 0x2d, 0x78, 0x2d, 0x78,
		0x78, 0x78, 0x78, 0x78, 0x78, 0x2d, 0x78, 0x78, 0x00,
	}

	m, err := UnmarshalPushNotification(packet)
	if err != nil {
		t.Fatal(err)
	}

	relative := 259200 * time.Second

	header := make(map[mms.MMSField][]mms.HeaderField)
	header[mms.ContentLocation] = []mms.HeaderField{hs("http://mt.t-mobile.com/mm?T=x-x-xxx-x-xxxxxx-xx")}
	header[mms.Expiry] = []mms.HeaderField{&mms.HeaderRelativeOrAbsoluteTime{
		Relative: &relative,
	}}
	header[mms.From] = []mms.HeaderField{hs("+15551231234/TYPE=PLMN")}
	header[mms.MessageClass] = []mms.HeaderField{hs("personal")}
	header[mms.MMSVersion] = []mms.HeaderField{hs("1.2")}
	header[mms.TransactionID] = []mms.HeaderField{hs("x-x-xx-x-xxxxxx-xx-xxx-x")}

	size := mms.HeaderUint(100451)
	header[mms.MessageSize] = []mms.HeaderField{&size}

	typ := mms.MNotificationInd
	header[mms.MessageType] = []mms.HeaderField{&typ}

	expectPacket := mms.Message{
		Header: header,
	}

	if !cmp.Equal(*m, expectPacket) {
		t.Fatal(cmp.Diff(*m, expectPacket))
	}
}

func hs(s string) *mms.HeaderString {
	h := mms.HeaderString(s)
	return &h
}
